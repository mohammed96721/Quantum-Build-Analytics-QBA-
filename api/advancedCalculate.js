/**
 * @file advancedCalculate.js
 * @desc ูุนุงูุฌุฉ ุจูุงูุงุช ุงููููุฐุฌ ูู process.js ูุญุณุงุจ ุงูุชูุงููู ูุงูุชุญููู ุงูุฅูุดุงุฆู ุจุฏูุฉ ููุฏุณูุฉ.
 * @version 1.6.3
 * @remarks
 * - ูุนุงูุฌ ุจูุงูุงุช ุงูุชุตููู (ุฎุฑุณุงูุฉุ ุทุงุจููุ ุฃุณุงุณุ ุชูุงููู) ุญุณุจ ูุนุงููุฑ ุงูุนุฑุงู 2025.
 * - ุงูุญุณุงุจุงุช ูุฑุชุจุฉ: ูููุงุชุ ูุฒู ุงูููุดุฃุ ุฃุณุงุณุ ุชูุงููู.
 * - ุชุญุณููุงุช: ุชูุธูู ุงููุชุงุฆุฌ ูุชููู ูุงุถุญุฉ ูููุงุณุจุฉ ูุชุตุฏูุฑ PDF ูุน ุชูุงุตูู ููุฏุณูุฉ ุฏูููุฉ.
 * - ุฅุฒุงูุฉ ุงูุชุญููุงุช (ุชูุฌุฑู ูู process.js).
 */

/**
 * @function getMaterialPrices
 * @desc ุฅุฑุฌุงุน ุฃุณุนุงุฑ ุงูููุงุฏ ูุงูุนูุงูุฉ ุจุงูุฏููุงุฑ ุงูุนุฑุงูู ูุนุงู 2025.
 * @returns {Object} ุฃุณุนุงุฑ ุงูููุงุฏ ูุงูุนูุงูุฉ.
 */
function getMaterialPrices() {
  return {
    concreteC30PerM3: 80000, // ุฎุฑุณุงูุฉ C30: 80000 ุฏ.ุน/ูยณ
    concreteC40PerM3: 98000, // ุฎุฑุณุงูุฉ C40: 98000 ุฏ.ุน/ูยณ
    steelPerTon: 1500000, // ุญุฏูุฏ: 1500000 ุฏ.ุน/ุทู
    cementOrdinaryPerTon: 120000, // ุฅุณููุช: 120000 ุฏ.ุน/ุทู
    sandPerM3: 25000, // ุฑูู: 25000 ุฏ.ุน/ูยณ
    gravelBasePerM3: 30000, // ุญุตู ุฃุณุงุณ: 30000 ุฏ.ุน/ูยณ
    sandBasePerM3: 25000, // ุฑูู ุฃุณุงุณ: 25000 ุฏ.ุน/ูยณ
    brickYellowPerDbl: 600000, // ุฏุจู ุทุงุจูู ุฃุตูุฑ: 600000 ุฏ.ุน
    brickRedPerDbl: 1250000, // ุฏุจู ุทุงุจูู ุฃุญูุฑ: 1250000 ุฏ.ุน
    brickThermostonePerThousand: 375000, // ุฃูู ุทุงุจููุฉ ุซุฑูุณุชูู: 375000 ุฏ.ุน
    gypsumPerTon: 75000, // ุฌุจุณ: 75000 ุฏ.ุน/ุทู
    limePerTon: 80000, // ุฌูุฑ: 80000 ุฏ.ุน/ุทู
    plasterLaborPerM2: 7000, // ุนูุงูุฉ ุฌุต: 7000 ุฏ.ุน/ูยฒ
    plasterCeilingLaborPerM2: 8000, // ุนูุงูุฉ ุฌุต ุฃุณูู: 8000 ุฏ.ุน/ูยฒ
    primingPerM2: 2000, // ุชูููุฏ: 2000 ุฏ.ุน/ูยฒ
    flooringMortarLaborPerM2: 6000, // ุนูุงูุฉ ูููุฉ ุฃุฑุถูุงุช: 6000 ุฏ.ุน/ูยฒ
    facadeEconomyPerM2: 20000, // ูุงุฌูุฉ ุงูุชุตุงุฏูุฉ: 20000 ุฏ.ุน/ูยฒ
    facadeSimplePerM2: 30000, // ูุงุฌูุฉ ุจุณูุทุฉ: 30000 ุฏ.ุน/ูยฒ
    facadeLuxuryPerM2: 50000, // ูุงุฌูุฉ ูุงุฎุฑุฉ: 50000 ุฏ.ุน/ูยฒ
    facadeLaborPerM2: 15000, // ุนูุงูุฉ ูุงุฌูุฉ: 15000 ุฏ.ุน/ูยฒ
    externalDoorFixed: 500000, // ุจุงุจ ุฎุงุฑุฌู: 500000 ุฏ.ุน
    internalDoorFixed: 300000, // ุจุงุจ ุฏุงุฎูู: 300000 ุฏ.ุน
    carGatePerM2: 30000, // ุจูุงุจุฉ ุณูุงุฑุฉ: 30000 ุฏ.ุน/ูยฒ
    hvacPerM: 25000, // ุชูููู: 25000 ุฏ.ุน/ู
    poolFixed: 10000000, // ูุณุจุญ: 10000000 ุฏ.ุน
    gardenPerM2: 25000, // ุญุฏููุฉ: 25000 ุฏ.ุน/ูยฒ
    fencePerM: 50000, // ุณูุงุฌ: 50000 ุฏ.ุน/ู
    elevatorBaseCost: 10000000, // ูุตุนุฏ ุฃุณุงุณู: 10000000 ุฏ.ุน
    elevatorPerFloorCost: 2500000, // ูุตุนุฏ ููู ุทุงุจู: 2500000 ุฏ.ุน
    excavationPerM3: 5000, // ุญูุฑ: 5000 ุฏ.ุน/ูยณ
    truckTransportPerTrip: 90000, // ููู ูุฎููุงุช: 90000 ุฏ.ุน/ุฑุญูุฉ
    baseLaborPerM2: 3000, // ุนูุงูุฉ ุฃุณุงุณ: 3000 ุฏ.ุน/ูยฒ
    electricalPointCost: 9000, // ููุทุฉ ููุฑุจุงุฆูุฉ: 9000 ุฏ.ุน
    electricalBoardFixed: 500000, // ููุญุฉ ููุฑุจุงุฆูุฉ: 500000 ุฏ.ุน
    electricalLaborPerPoint: 3000, // ุนูุงูุฉ ููุทุฉ ููุฑุจุงุฆูุฉ: 3000 ุฏ.ุน
    plumbingBathroomMaterials: 500000, // ููุงุฏ ุณุจุงูุฉ ุญูุงู: 500000 ุฏ.ุน
    plumbingKitchenMaterials: 150000, // ููุงุฏ ุณุจุงูุฉ ูุทุจุฎ: 150000 ุฏ.ุน
    plumbingOtherMaterials: 100000, // ููุงุฏ ุณุจุงูุฉ ุฃุฎุฑู: 100000 ุฏ.ุน
    plumbingBathroomLabor: 1500000, // ุนูุงูุฉ ุณุจุงูุฉ ุญูุงู: 1500000 ุฏ.ุน
    bathroomFittingsPerSet: 1200000, // ุชุฌููุฒุงุช ุญูุงู: 1200000 ุฏ.ุน/ูุฌููุนุฉ
    brickLaborPerDbl: 400000, // ุนูุงูุฉ ุทุงุจูู: 400000 ุฏ.ุน/ุฏุจู
    brickLaborPerThousand: 100000, // ุนูุงูุฉ ุทุงุจูู ุซุฑูุณุชูู: 100000 ุฏ.ุน/ุฃูู
    brickLaborExtraPerFloor: 50000, // ุฒูุงุฏุฉ ุนูุงูุฉ ุทุงุจูู ููู ุทุงุจู: 50000 ุฏ.ุน
    carpentryLaborPerM3: {
      plywood: 100000, // ุนูุงูุฉ ูุฌุงุฑุฉ ุจููููุฏ: 100000 ุฏ.ุน/ูยณ
      regular: 120000, // ุนูุงูุฉ ูุฌุงุฑุฉ ุนุงุฏู: 120000 ุฏ.ุน/ูยณ
      waffle: 150000 // ุนูุงูุฉ ูุฌุงุฑุฉ ูุงูู: 150000 ุฏ.ุน/ูยณ
    },
    steelLaborPerM3: 100000, //ุนูุงูู ุญุฏูุฏ:100000 ุฏ.ุน/ูยณ
    skylightsPerM2: 150000, // ููุงูุฑ: 150000 ุฏ.ุน/ูยฒ
    secondaryCeilingsPerM2: 30000, // ุฃุณูู ุซุงูููุฉ: 30000 ุฏ.ุน/ูยฒ
    decorativeWallsPerM2: 35000, // ุฌุฏุฑุงู ุฒุฎุฑููุฉ: 35000 ุฏ.ุน/ูยฒ
    garageCanopyFixed: 1000000, // ูุธูุฉ ูุฑุขุจ: 1000000 ุฏ.ุน
    transportConcretePerM3: 2000, // ููู ุฎุฑุณุงูุฉ: 2000 ุฏ.ุน/ูยณ
    transportSteelPerTon: 50000, // ููู ุญุฏูุฏ: 50000 ุฏ.ุน/ุทู
    transportCementPerTon: 3000, // ููู ุฅุณููุช: 3000 ุฏ.ุน/ุทู
    transportSandPerM3: 1500, // ููู ุฑูู: 1500 ุฏ.ุน/ูยณ
    transportBricksPerDbl: 40000, // ููู ุทุงุจูู: 40000 ุฏ.ุน/ุฏุจู
    transportBricksThermostonePerThousand: 10000 // ููู ุซุฑูุณุชูู: 10000 ุฏ.ุน/ุฃูู
  };
}

/**
 * @function getEngineeringConstants
 * @desc ุฅุฑุฌุงุน ุงูุซูุงุจุช ุงูููุฏุณูุฉ ุญุณุจ ุงููุนุงููุฑ ุงูุนุฑุงููุฉ.
 * @returns {Object} ุงูุซูุงุจุช ุงูููุฏุณูุฉ.
 */
async function processAdvanced(data) {
  try {
    // ุชุณุฌูู ุงูุจูุงูุงุช ุงููุงุฑุฏุฉ ููุชุญูู ูููุง
    console.log('๐ฅ **ุจูุงูุงุช processAdvanced**:', JSON.stringify(data, null, 2));

    // ุงูุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช
    if (!data || typeof data !== 'object') {
      throw new Error('ุงูุจูุงูุงุช ุงููุฏุฎูุฉ ุบูุฑ ุตุงูุญุฉ ุฃู ุบูุฑ ููุฌูุฏุฉ');
    }

    // **ุงุณุชุฎูุงุต ุงูุจูุงูุงุช ูุน ููู ุงูุชุฑุงุถูุฉ ุขููุฉ**
    const customer = {
      'ุงูุงุณู': data.customer?.name ?? 'ุบูุฑ ูุชููุฑ', // ุงุณุชุฎุฏุงู ?? ูุถูุงู ูููุฉ ุงูุชุฑุงุถูุฉ
      'ุงููุงุชู': data.customer?.phone ?? 'ุบูุฑ ูุชููุฑ' // ูุต
    };

    const location = {
      'ุงููุญุงูุธุฉ': data.location?.governorate ?? 'ุบูุฑ ูุญุฏุฏ', // ูุต
      'ุงูููุทูุฉ': data.location?.area ?? 'ุบูุฑ ูุญุฏุฏ' // ูุต
    };

    const land = {
      'ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)': data.land?.area ?? 0, // ุนุดุฑู
      'ุนุฑุถ ุงููุงุฌูุฉ (ู)': data.land?.facadeWidth ?? 0 // ุนุดุฑู
    };

    const building = {
      'ุนุฏุฏ ุงูุทูุงุจู': data.building?.floors ?? 0, // ุตุญูุญ
      'ุนุฏุฏ ุงูุบุฑู': data.building?.rooms ?? 0, // ุตุญูุญ
      'ุนุฏุฏ ุงูุญูุงูุงุช': data.building?.bathrooms ?? 0, // ุตุญูุญ
      'ุงุฑุชูุงุน ุงูุฃุฑุถู (ู)': data.building?.groundFloorHeight ?? 0, // ุนุดุฑู
      'ุงุฑุชูุงุน ุงูุทูุงุจู (ู)': data.building?.otherFloorsHeight ?? 0, // ุนุดุฑู
      'ุณูู ุงูุณูู (ู)': data.building?.ceilingThickness ?? 0, // ุนุดุฑู
      'ููุน ุงูุทุงุจูู': data.building?.brickType ?? 'yellow', // ูุต
      'ุชูุงุตูู ุงูุณูู': data.building?.ceilingDetails ?? 'regular', // ูุต
      'ููุน ุงููุงุฌูุฉ': data.building?.facadeType ?? 'economy', // ูุต
      'ุญุฏููุฉ': data.building?.hasGarden ?? false, // ููุทูู
      'ูุณุจุญ': data.building?.hasPool ?? false, // ููุทูู
      'ุชูููู': data.building?.hasHVAC ?? false, // ููุทูู
      'ูุตุนุฏ': data.building?.hasElevator ?? false, // ููุทูู
      'ุณูุงุฌ': data.building?.hasFence ?? false, // ููุทูู
      'ุญุฌู ุงููุฑุงุบ (ูยณ)': data.waffleSlabInfo ? data.building?.voidSize ?? 0 : 0, // ุนุดุฑู
      'ุนุฏุฏ ุงููุฑุงุบุงุช': data.waffleSlabInfo ? data.building?.voidCount ?? 0 : 0, // ุตุญูุญ
      'ูุณุงุญุฉ ุงููุงุฌูุฉ (ูยฒ)': data.customFacadeInfo ? data.building?.facadeArea ?? 0 : 0, // ุนุดุฑู
      'ุนุฏุฏ ุงูุดูู': data.apartmentsInfo ? data.building?.apartmentsCount ?? 0 : 0, // ุตุญูุญ
      'ุนุฏุฏ ุงูุทูุงุจู ุงูุณูููุฉ': data.basementInfo ? data.building?.basementFloors ?? 0 : 0, // ุตุญูุญ
      'ูุณุงุญุฉ ุงูุณููู ุงูุณูููุฉ (ูยฒ)': data.basementInfo ? data.building?.basementCeilingArea ?? 0 : 0, // ุนุดุฑู
      'ุณุนุฑ ูยฒ ุงูุทูุงุจู ุงูุณูููุฉ': data.basementInfo ? data.building?.basementPrice ?? 0 : 0 // ุนุดุฑู
    };

    const pricesInput = {
      'ุชุดุทูุจ ุงูุฃุฑุถูุงุช (ุฏ.ุน/ูยฒ)': data.prices?.flooring ?? 0, // ุนุดุฑู
      'ุชุฑููุจ ุงูุฌุฏุฑุงู (ุฏ.ุน/ูยฒ)': data.prices?.wallInstallation ?? 0, // ุนุดุฑู
      'ุตุจุบ ุงูุฌุฏุฑุงู (ุฏ.ุน/ูยฒ)': data.prices?.wallPainting ?? 0, // ุนุดุฑู
      'ุดุจุงุจูู ูุฃุจูุงุจ (ุฏ.ุน/ูยฒ)': data.prices?.windowsDoors ?? 0, // ุนุดุฑู
      'ุงููุงุฌูุฉ (ุฏ.ุน/ูยฒ)': data.customFacadeInfo ? data.prices?.facadePrice ?? 0 : 0, // ุนุดุฑู
      'ูุญุฌุฑ ุงูุฏุฑุฌ (ุฏ.ุน/ู)': data.stairsRailingInfo && data.hasMap ? data.prices?.stairsRailing ?? 0 : 0, // ุนุดุฑู
      'ุงูุฌุฏุฑุงู ุงูุฏุงุฎููุฉ (ุฏ.ุน/ูยฒ)': data.internalWallsInfo && data.hasMap ? data.prices?.internalWalls ?? 0 : 0 // ุนุดุฑู
    };

    const technicalDetails = data.hasMap ? {
      'ูุณุงุญุฉ ุงูุณููู (ูยฒ)': data.technicalDetails?.totalRoofArea ?? 0, // ุนุดุฑู
      'ูุณุงุญุฉ ุงูุญุฏููุฉ (ูยฒ)': data.technicalDetails?.gardenArea ?? 0, // ุนุดุฑู
      'ูุณุงุญุฉ ุงููุฑุงุฌ (ูยฒ)': data.technicalDetails?.garagePathArea ?? 0, // ุนุดุฑู
      'ูุณุงุญุฉ ุงูููุงูุฑ (ูยฒ)': data.technicalDetails?.skylightsArea ?? 0, // ุนุดุฑู
      'ุทูู ุงูุฑุจุงุทุงุช (ู)': data.technicalDetails?.tiesLength ?? 0, // ุนุดุฑู
      'ุทูู ุงูุฌุณูุฑ ุงูููููุจุฉ (ู)': data.technicalDetails?.invertedBeams ?? 0, // ุนุดุฑู
      'ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)': data.technicalDetails?.externalWalls24cm ?? 0, // ุนุดุฑู
      'ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)': data.technicalDetails?.internalWalls24cm ?? 0, // ุนุดุฑู
      'ุณุชุงุฑุฉ ุงูุณุทุญ (ู)': data.technicalDetails?.roofFenceLength ?? 0, // ุนุดุฑู
      'ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ': data.technicalDetails?.externalDoors ?? 0, // ุตุญูุญ
      'ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ': data.technicalDetails?.internalDoors ?? 0, // ุตุญูุญ
      'ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)': data.technicalDetails?.facadeWindowsDoorsArea ?? 0, // ุนุดุฑู
      'ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)': data.technicalDetails?.skylightWindowsDoorsArea ?? 0, // ุนุดุฑู
      'ุณููู ุซุงูููุฉ (ูยฒ)': data.technicalDetails?.secondaryCeilingsArea ?? 0, // ุนุดุฑู
      'ุฌุฏุฑุงู ุฏูููุฑูุฉ (ูยฒ)': data.technicalDetails?.decorativeWallsArea ?? 0, // ุนุดุฑู
      'ุฌุฏุฑุงู ุงูุชุบููู (ูยฒ)': data.technicalDetails?.claddingWallsArea ?? 0, // ุนุดุฑู
      'ุฌุต ุฎุงุฑุฌู (ูยฒ)': data.technicalDetails?.plasterWallsArea ?? 0, // ุนุดุฑู
      'ุญุฌู ุงูููููุฑูุช (ูยณ)': data.concreteColumnsInfo && data.hasMap ? data.technicalDetails?.concreteVolume ?? 0 : 0, // ุนุดุฑู
      'ูุญุฌุฑ ุงูุฏุฑุฌ (ู)': data.stairsRailingInfo && data.hasMap ? data.technicalDetails?.stairsRailingLength ?? 0 : 0, // ุนุดุฑู
      'ูุณุงุญุฉ ุงูุฌุฏุฑุงู (ูยฒ)': data.internalWallsInfo && data.hasMap ? data.technicalDetails?.internalWallsArea ?? 0 : 0 // ุนุดุฑู
    } : {};

    // **ูุนุงูุฌุฉ ุงูุฃูุณุงู ุงููุดุฑูุทุฉ**
    const customFacadeInfo = data.customFacadeInfo === true;
    const waffleSlabInfo = data.waffleSlabInfo === true;
    const apartmentsInfo = data.apartmentsInfo === true;
    const basementInfo = data.basementInfo === true;
    const stairsRailingInfo = data.stairsRailingInfo === true;
    const internalWallsInfo = data.internalWallsInfo === true;
    const concreteColumnsInfo = data.concreteColumnsInfo === true;

    // **ุงูุญุตูู ุนูู ุงูุฃุณุนุงุฑ ูุงูุซูุงุจุช**
    const prices = getMaterialPrices();
    const constants = getEngineeringConstants();

    // **ุฏุงูุฉ ูุชูุฑูุจ ุงูุฃุฑูุงู ุฅูู ููุฒูุชูู ุนุดุฑูุชูู**
    const roundToTwoDecimals = (num) => isNaN(num) ? 0 : Math.round(num * 100) / 100;

    // **ุญุณุงุจ ุงููููุงุช ุงูุฃูููุฉ**
    // --- ุฎุฑุณุงูุฉ ุงูุฃุณูู ---
    let roofConcrete = roundToTwoDecimals(technicalDetails['ูุณุงุญุฉ ุงูุณููู (ูยฒ)'] * building['ุณูู ุงูุณูู (ู)']);
    if (waffleSlabInfo && building['ุชูุงุตูู ุงูุณูู'] === 'waffle') {
      const voidVolume = roundToTwoDecimals(building['ุญุฌู ุงููุฑุงุบ (ูยณ)'] * building['ุนุฏุฏ ุงููุฑุงุบุงุช']);
      roofConcrete = Math.max(0, roundToTwoDecimals(roofConcrete - voidVolume));
    }

    // --- ุณูู ุงูุฌุฏุงุฑ ุญุณุจ ููุน ุงูุทุงุจูู ---
    const wallThickness = building['ููุน ุงูุทุงุจูู'] === 'yellow' ? constants.brickYellowDimensions.width
      : building['ููุน ุงูุทุงุจูู'] === 'red' ? constants.brickRedDimensions.width
      : building['ููุน ุงูุทุงุจูู'] === 'thermostone' ? constants.brickThermostoneDimensions.width
      : constants.brickYellowDimensions.width;

    // --- ุฎุฑุณุงูุฉ ุงูุฑุจุงุทุงุช ---
    const tieBeamConcrete = roundToTwoDecimals(technicalDetails['ุทูู ุงูุฑุจุงุทุงุช (ู)'] * constants.tieBeamHeight * wallThickness);

    // --- ุฎุฑุณุงูุฉ ุงูุฌุณูุฑ ุงูููููุจุฉ ---
    const invertedBeamConcrete = roundToTwoDecimals(technicalDetails['ุทูู ุงูุฌุณูุฑ ุงูููููุจุฉ (ู)'] * constants.invertedBeamHeight * wallThickness);

    // --- ุฎุฑุณุงูุฉ ุฅุถุงููุฉ ---
    const additionalConcrete = concreteColumnsInfo ? roundToTwoDecimals(technicalDetails['ุญุฌู ุงูููููุฑูุช (ูยณ)'] || 0) : 0;

    // --- ุฅุฌูุงูู ุงูุฎุฑุณุงูุฉ ุงูุฃูููุฉ ---
    let totalConcrete = roundToTwoDecimals(roofConcrete + tieBeamConcrete + invertedBeamConcrete + additionalConcrete);

    // --- ุงูุฌุฏุฑุงู ---
    const totalWallLength = roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] + technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)']);
    const coverageRatio = totalWallLength > 0 ? Math.min(1, roundToTwoDecimals(technicalDetails['ุทูู ุงูุฑุจุงุทุงุช (ู)'] / totalWallLength)) : 0;

    // --- ุงุฑุชูุงุน ุงูุฌุฏุฑุงู ุงูุตุงูู ---
    const adjustedGroundFloorHeight = roundToTwoDecimals(building['ุงุฑุชูุงุน ุงูุฃุฑุถู (ู)'] - (coverageRatio * constants.tieBeamHeight));
    const adjustedOtherFloorsHeight = roundToTwoDecimals(building['ุงุฑุชูุงุน ุงูุทูุงุจู (ู)'] - (coverageRatio * constants.tieBeamHeight));
    const totalWallHeight = roundToTwoDecimals(adjustedGroundFloorHeight + (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1) * adjustedOtherFloorsHeight);

    // --- ุญุฌู ุงูุฌุฏุฑุงู ---
    const externalWallsVolume = roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] * totalWallHeight * wallThickness);
    const internalWallsVolume = roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)'] * totalWallHeight * wallThickness);

    // --- ุงููุชุญุงุช ---
    const facadeOpeningsVolume = roundToTwoDecimals(technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)'] * wallThickness);
    const skylightOpeningsVolume = roundToTwoDecimals(technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)'] * wallThickness);
    const externalDoorsVolume = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ'] * 
      constants.externalDoorDimensions.width * constants.externalDoorDimensions.height * wallThickness);
    const internalDoorsVolume = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ'] * 
      constants.internalDoorDimensions.width * constants.internalDoorDimensions.height * wallThickness);
    const totalOpeningsVolume = roundToTwoDecimals(facadeOpeningsVolume + skylightOpeningsVolume + externalDoorsVolume + internalDoorsVolume);

    // --- ุญุฌู ุงูุฌุฏุฑุงู ุงูุตุงูู ---
    const wallsVolume = Math.max(0, roundToTwoDecimals(externalWallsVolume + internalWallsVolume - totalOpeningsVolume));

    // **ุญุณุงุจ ุงูุทุงุจูู**
    let brickDbls = 0;
    let brickCount = 0;
    const brickVolume = building['ููุน ุงูุทุงุจูู'] === 'yellow' ? constants.brickYellowDimensions.width * constants.brickYellowDimensions.length * constants.brickYellowDimensions.height
      : building['ููุน ุงูุทุงุจูู'] === 'red' ? constants.brickRedDimensions.width * constants.brickRedDimensions.length * constants.brickRedDimensions.height
      : building['ููุน ุงูุทุงุจูู'] === 'thermostone' ? constants.brickThermostoneDimensions.width * constants.brickThermostoneDimensions.length * constants.brickThermostoneDimensions.height
      : constants.brickYellowDimensions.width * constants.brickYellowDimensions.length * constants.brickYellowDimensions.height;

    const brickDensity = building['ููุน ุงูุทุงุจูู'] === 'yellow' ? constants.brickYellowDensity
      : building['ููุน ุงูุทุงุจูู'] === 'red' ? constants.brickRedDensity
      : building['ููุน ุงูุทุงุจูู'] === 'thermostone' ? constants.brickThermostoneDensity
      : constants.brickYellowDensity;

    if (building['ููุน ุงูุทุงุจูู'] === 'thermostone') {
      const brickWithMortarLength = constants.brickThermostoneDimensions.length + constants.brickThermostoneMortarVertical;
      const brickWithMortarHeight = constants.brickThermostoneDimensions.height + constants.brickThermostoneMortarHorizontal;
      const brickWithMortarVolume = roundToTwoDecimals(constants.brickThermostoneDimensions.width * brickWithMortarLength * brickWithMortarHeight);
      brickCount = Math.ceil(wallsVolume / brickWithMortarVolume);
      brickDbls = Math.ceil(brickCount / 1000);
    } else {
      const coveragePerDbl = building['ููุน ุงูุทุงุจูู'] === 'yellow' ? constants.brickYellowCoveragePerDbl
        : building['ููุน ุงูุทุงุจูู'] === 'red' ? constants.brickRedCoveragePerDbl
        : constants.brickYellowCoveragePerDbl;
      brickDbls = Math.ceil(wallsVolume / coveragePerDbl);
      brickCount = brickDbls * constants.bricksPerDbl;
    }

    // **ุญุณุงุจ ุงูุฃุฑุถูุงุช ูุงููููุฉ**
    const groundFloorArea = roundToTwoDecimals(land['ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)'] - technicalDetails['ูุณุงุญุฉ ุงูุญุฏููุฉ (ูยฒ)'] - technicalDetails['ูุณุงุญุฉ ุงููุฑุงุฌ (ูยฒ)']);
    const roofAreaPerFloor = building['ุนุฏุฏ ุงูุทูุงุจู'] > 0 ? roundToTwoDecimals(technicalDetails['ูุณุงุญุฉ ุงูุณููู (ูยฒ)'] / building['ุนุฏุฏ ุงูุทูุงุจู']) : 0;
    const otherFloorsArea = roundToTwoDecimals(roofAreaPerFloor * (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1));
    const wallsAreaPerFloor = roundToTwoDecimals((technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] + technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)']) * wallThickness);
    const flooringArea = Math.max(0, roundToTwoDecimals(groundFloorArea + otherFloorsArea - wallsAreaPerFloor * building['ุนุฏุฏ ุงูุทูุงุจู']));
    const wallMortarArea = roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุงูุชุบููู (ูยฒ)'] || 0);

    // **ุญุณุงุจ ุงูุฌุต ุงูุฎุงุฑุฌู**
    const skylightArea = roundToTwoDecimals(technicalDetails['ูุณุงุญุฉ ุงูููุงูุฑ (ูยฒ)']);
    const skylightWidth = skylightArea > 0 ? roundToTwoDecimals(Math.sqrt(skylightArea / 3)) : 0;
    const skylightLength = roundToTwoDecimals(skylightWidth * 3);
    const skylightLongestWallArea = roundToTwoDecimals(skylightLength * totalWallHeight);
    let externalWallsPlasterArea = roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] * totalWallHeight - 
      technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)'] - 
      technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ'] * constants.externalDoorDimensions.width * constants.externalDoorDimensions.height - 
      skylightLongestWallArea);

    // **ุญุณุงุจ ุฌุฏุฑุงู ุงูููุงูุฑ**
    const skylightPerimeter = skylightArea > 0 ? roundToTwoDecimals(2 * (skylightLength + skylightWidth)) : 0;
    const skylightHeightPerFloor = roundToTwoDecimals(building['ุงุฑุชูุงุน ุงูุทูุงุจู (ู)'] + building['ุณูู ุงูุณูู (ู)']);
    const totalSkylightHeight = roundToTwoDecimals(adjustedGroundFloorHeight + (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1) * skylightHeightPerFloor);
    const skylightWallsPlasterArea = roundToTwoDecimals(skylightPerimeter * totalSkylightHeight - 
      technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)']);

    // **ุญุณุงุจ ุงูุฌุต ุงูุฏุงุฎูู**
    const skylightInternalWallsArea = skylightArea > 0 ? roundToTwoDecimals((2 * skylightWidth + skylightLength) * totalSkylightHeight - 
      technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)']) : 0;
    let internalWallsPlasterArea = roundToTwoDecimals((technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)'] * totalWallHeight * 2) - 
      (technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ'] * constants.internalDoorDimensions.width * constants.internalDoorDimensions.height) - 
      skylightInternalWallsArea);

    // **ุญุณุงุจ ุฌุต ุงูุฃุณูู**
    const ceilingPlasterArea = roundToTwoDecimals(roofAreaPerFloor * (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1) - 
      technicalDetails['ุณููู ุซุงูููุฉ (ูยฒ)'] - 
      wallsAreaPerFloor);

    // **ุญุณุงุจ ุฅุทุงุฑุงุช ุงูุดุจุงุจูู ูุงูุฃุจูุงุจ ููุฌุต**
    const frameHeight = roundToTwoDecimals(adjustedGroundFloorHeight);
    const facadeWindowsFramePerimeter = technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)'] > 0 
      ? roundToTwoDecimals(2 * (Math.sqrt(technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)']) + frameHeight)) 
      : 0;
    const skylightWindowsFramePerimeter = technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)'] > 0 
      ? roundToTwoDecimals(2 * (Math.sqrt(technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)']) + frameHeight)) 
      : 0;
    const externalDoorsFramePerimeter = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ'] * 
      (constants.externalDoorDimensions.width + 2 * constants.externalDoorDimensions.height));
    const internalDoorsFramePerimeter = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ'] * 
      (constants.internalDoorDimensions.width + 2 * constants.internalDoorDimensions.height));
    const windowsFrameAreaExternal = roundToTwoDecimals((facadeWindowsFramePerimeter + skylightWindowsFramePerimeter) * (wallThickness / 2));
    const externalDoorsFrameArea = roundToTwoDecimals(externalDoorsFramePerimeter * (wallThickness / 2));
    const internalDoorsFrameArea = roundToTwoDecimals(internalDoorsFramePerimeter * wallThickness);
    externalWallsPlasterArea += roundToTwoDecimals(windowsFrameAreaExternal + externalDoorsFrameArea);
    internalWallsPlasterArea += roundToTwoDecimals(windowsFrameAreaExternal + internalDoorsFrameArea);
    const totalPlasterArea = Math.max(0, roundToTwoDecimals(externalWallsPlasterArea + internalWallsPlasterArea + ceilingPlasterArea - wallMortarArea));

    // **ุญุณุงุจ ูุฒู ุงูููุดุฃ**
    const concreteWeight = roundToTwoDecimals(totalConcrete * constants.concreteDensity);
    const roofSteel = roundToTwoDecimals(totalConcrete * constants.steelPerM3ConcreteRoof / 1000);
    const steelWeight = roundToTwoDecimals(roofSteel * constants.steelDensity);
    const brickWeight = roundToTwoDecimals(wallsVolume * brickDensity);
    const floorMortarWeight = roundToTwoDecimals(flooringArea * constants.mortarFloorThickness * constants.mortarFloorDensity);
    const wallMortarWeight = roundToTwoDecimals(wallMortarArea * constants.mortarWallsThickness * constants.mortarWallsDensity);
    const flooringWeight = roundToTwoDecimals(flooringArea * constants.mortarFloorThickness * constants.flooringDensity);
    const plasterWeight = roundToTwoDecimals(totalPlasterArea * constants.plasterThickness * 
      (constants.gypsumDensity * 0.75 + constants.limeDensity * 0.25));
    const liveLoadWeight = roundToTwoDecimals(roofAreaPerFloor * (
      building['ุนุฏุฏ ุงูุทูุงุจู'] === 1 ? constants.liveLoadPerM2GroundFloor : 
      ((constants.liveLoadPerM2GroundFloor + (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1) * constants.liveLoadPerM2OtherFloors + constants.liveLoadPerM2Roof) / building['ุนุฏุฏ ุงูุทูุงุจู'])
    ));
    const additionalDeadLoadWeight = roundToTwoDecimals((roofAreaPerFloor + technicalDetails['ุณููู ุซุงูููุฉ (ูยฒ)'] + 
      technicalDetails['ุฌุฏุฑุงู ุฏูููุฑูุฉ (ูยฒ)']) * constants.deadLoadAdditionalPerM2);
    const waterTanksWeight = roundToTwoDecimals(building['ุนุฏุฏ ุงูุญูุงูุงุช'] * constants.waterTankWeight);
    const heatersWeight = roundToTwoDecimals(building['ุนุฏุฏ ุงูุญูุงูุงุช'] * constants.heaterWeight);
    const externalDoorsWeight = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ'] * constants.externalDoorWeight);
    const internalDoorsWeight = roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ'] * constants.internalDoorWeight);
    const windowsWeight = roundToTwoDecimals((technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)'] + 
      technicalDetails['ุดุจุงุจูู ุงูููุงูุฑ (ูยฒ)']) * constants.windowWeightPerM2);
    const totalOpeningsWeight = roundToTwoDecimals(externalDoorsWeight + internalDoorsWeight + windowsWeight);
    const screedWeight = roundToTwoDecimals(roofAreaPerFloor * constants.screedThickness * constants.screedDensity);
    const totalWeight = roundToTwoDecimals((concreteWeight + steelWeight + brickWeight + floorMortarWeight + 
      wallMortarWeight + flooringWeight + plasterWeight + liveLoadWeight + additionalDeadLoadWeight + 
      waterTanksWeight + heatersWeight + totalOpeningsWeight + screedWeight) * constants.gravityConstant / 1000);

    // **ุญุณุงุจ ุงูุฃุณุงุณ**
    const raftArea = roundToTwoDecimals(land['ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)'] - technicalDetails['ูุณุงุญุฉ ุงูุญุฏููุฉ (ูยฒ)'] - 
      technicalDetails['ูุณุงุญุฉ ุงููุฑุงุฌ (ูยฒ)']);
    const pressure = roundToTwoDecimals(totalWeight / (raftArea || 1)); // ุชุฌูุจ ุงููุณูุฉ ุนูู ุตูุฑ
    const requiredRaftThickness = Math.max(
      constants.minRaftThickness,
      Math.min(
        constants.maxRaftThickness,
        roundToTwoDecimals((pressure / (constants.soilBearingCapacity / constants.safetyFactorFoundation)) * 0.3)
      )
    );
    const raftThickness = roundToTwoDecimals(requiredRaftThickness);
    let raftType;
    let foundationRecommendation = '';
    if (raftThickness <= 0.3) {
      raftType = 'ุนุงุฏู';
      foundationRecommendation = 'ุฃุณุงุณ ุฑูุงุฆุฒู ููุงุณุจ ููุฃุญูุงู ุงูุฎูููุฉ.';
    } else if (raftThickness <= 0.8) {
      raftType = 'ูููู';
      foundationRecommendation = 'ุฃุณุงุณ ูููู ูุน ุทุจูุฉ ุฎุฑุณุงููุฉ ุณูููุฉ.';
    } else {
      raftType = 'ุบูุฑ ููุงุณุจ';
      foundationRecommendation = 'ูููุตุญ ุจุงุณุชุฎุฏุงู ุฃุณุงุณุงุช ุดุฑูุทูุฉ ุฃู ุฎูุงุฒูู ูุชูููู ุงูุชูููุฉ.';
    }
    const raftVolume = roundToTwoDecimals(raftArea * raftThickness);

    // **ุญุณุงุจ ุญุฌู ุงูุญูุฑ**
    const excavationDepth = roundToTwoDecimals(((building['ุนุฏุฏ ุงูุทูุงุจู ุงูุณูููุฉ'] || 0) * constants.excavationDepthBasement) + constants.baseLayerThickness);
    const excavationVolume = roundToTwoDecimals(land['ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)'] * excavationDepth);
    const truckTrips = Math.ceil(excavationVolume / 24);

    // **ุงููููุงุช ุงูููุงุฆูุฉ**
    totalConcrete = roundToTwoDecimals(totalConcrete + raftVolume);
    const foundationSteel = roundToTwoDecimals(raftVolume * constants.steelPerM3ConcreteFoundation / 1000);
    const totalSteel = roundToTwoDecimals(roofSteel + foundationSteel);
    const baseVolume = roundToTwoDecimals(raftArea * constants.baseLayerThickness);
    const gravelBase = roundToTwoDecimals(baseVolume * 0.6);
    const sandBase = roundToTwoDecimals(baseVolume * 0.4);
    const cementForFloorMortar = roundToTwoDecimals(flooringArea * constants.cementPerM2MortarFloor);
    const sandForFloorMortar = roundToTwoDecimals(flooringArea * constants.sandPerM2MortarFloor);
    const cementForWallMortar = roundToTwoDecimals(wallMortarArea * constants.cementPerM2MortarWalls);
    const sandForWallMortar = roundToTwoDecimals(wallMortarArea * constants.sandPerM2MortarWalls);
    const gypsumQuantity = roundToTwoDecimals(totalPlasterArea * constants.gypsumPerM2Plaster);
    const limeQuantity = roundToTwoDecimals(totalPlasterArea * constants.limePerM2Plaster);

    // **ุงุณุชูุฑุงุฑ ุงูุฌุฏุฑุงู**
    const brickCompressiveStrength = building['ููุน ุงูุทุงุจูู'] === 'yellow' ? constants.brickYellowCompressiveStrength
      : building['ููุน ุงูุทุงุจูู'] === 'red' ? constants.brickRedCompressiveStrength
      : building['ููุน ุงูุทุงุจูู'] === 'thermostone' ? constants.brickThermostoneCompressiveStrength
      : constants.brickYellowCompressiveStrength;
    const wallCapacity = roundToTwoDecimals(brickCompressiveStrength * 1000 * wallThickness * totalWallLength);
    const minWallLength = roundToTwoDecimals(totalWeight / (brickCompressiveStrength * 1000 * wallThickness));
    const isWallStable = totalWallLength >= minWallLength;
    const stabilityNote = isWallStable ? 'ุงูุฌุฏุฑุงู ูุณุชูุฑุฉ ูุชุชุญูู ุงูุฃุญูุงู.' : 'ุงูุฌุฏุฑุงู ุบูุฑ ูุณุชูุฑุฉุ ูููุตุญ ุจุฒูุงุฏุฉ ุทูู ุงูุฌุฏุฑุงู ุฃู ุงุณุชุฎุฏุงู ุฏุนุงูุงุช ุฅุถุงููุฉ.';

    // **ุญุณุงุจ ุงููุงุฌูุฉ**
    const facadeArea = customFacadeInfo ? roundToTwoDecimals(building['ูุณุงุญุฉ ุงููุงุฌูุฉ (ูยฒ)']) 
      : roundToTwoDecimals(land['ุนุฑุถ ุงููุงุฌูุฉ (ู)'] * (building['ุงุฑุชูุงุน ุงูุฃุฑุถู (ู)'] + building['ุงุฑุชูุงุน ุงูุทูุงุจู (ู)'] * (building['ุนุฏุฏ ุงูุทูุงุจู'] - 1)) - 
        technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)']);
    const facadeCost = customFacadeInfo ? roundToTwoDecimals(facadeArea * pricesInput['ุงููุงุฌูุฉ (ุฏ.ุน/ูยฒ)'])
      : roundToTwoDecimals(facadeArea * (building['ููุน ุงููุงุฌูุฉ'] === 'economy' ? prices.facadeEconomyPerM2
        : building['ููุน ุงููุงุฌูุฉ'] === 'simple' ? prices.facadeSimplePerM2 : prices.facadeLuxuryPerM2));

    // **ุญุณุงุจ ุงูููุงูุฑ**
    const skylightCost = building['ุญุฏููุฉ'] 
      ? roundToTwoDecimals(technicalDetails['ูุณุงุญุฉ ุงูุญุฏููุฉ (ูยฒ)'] * prices.gardenPerM2)
      : roundToTwoDecimals(skylightWallsPlasterArea * prices.plasterLaborPerM2);

    // **ุญุณุงุจ ุงูุชูุงููู**
    const costBreakdown = {
      'ุฎุฑุณุงูุฉ': roundToTwoDecimals((totalConcrete - raftVolume) * prices.concreteC30PerM3 + raftVolume * prices.concreteC40PerM3),
      'ุญุฏูุฏ ุงูุชุณููุญ': roundToTwoDecimals(totalSteel * prices.steelPerTon),
      'ุฅุณููุช': roundToTwoDecimals((cementForFloorMortar + cementForWallMortar) * prices.cementOrdinaryPerTon),
      'ุฑูู': roundToTwoDecimals((sandForFloorMortar + sandForWallMortar) * prices.sandPerM3),
      'ุญุตู ุงูุฃุณุงุณ': roundToTwoDecimals(gravelBase * prices.gravelBasePerM3),
      'ุฑูู ุงูุฃุณุงุณ': roundToTwoDecimals(sandBase * prices.sandBasePerM3),
      'ุนูุงูุฉ ุงูุฃุณุงุณ': roundToTwoDecimals(raftArea * prices.baseLaborPerM2),
      'ุทุงุจูู': building['ููุน ุงูุทุงุจูู'] === 'thermostone' 
        ? roundToTwoDecimals(BbrickDbls * prices.brickThermostonePerThousand)
        : roundToTwoDecimals(brickDbls * (building['ููุน ุงูุทุงุจูู'] === 'yellow' ? prices.brickYellowPerDbl : prices.brickRedPerDbl)),
      'ุฌุจุณ': roundToTwoDecimals(gypsumQuantity * prices.gypsumPerTon),
      'ุฌูุฑ': roundToTwoDecimals(limeQuantity * prices.limePerTon),
      'ุญูุฑ': roundToTwoDecimals(excavationVolume * prices.excavationPerM3),
      'ููู ุงููุฎููุงุช': roundToTwoDecimals(truckTrips * prices.truckTransportPerTrip),
      'ุชุดุทูุจ ุงูุฃุฑุถูุงุช': roundToTwoDecimals(flooringArea * pricesInput['ุชุดุทูุจ ุงูุฃุฑุถูุงุช (ุฏ.ุน/ูยฒ)']),
      'ุนูุงูุฉ ูููุฉ ุงูุฃุฑุถูุงุช': roundToTwoDecimals(flooringArea * prices.flooringMortarLaborPerM2),
      'ุงููุงุฌูุฉ': facadeCost,
      'ุนูุงูุฉ ุงููุงุฌูุฉ': roundToTwoDecimals(facadeArea * prices.facadeLaborPerM2),
      'ุดุจุงุจูู ูุฃุจูุงุจ': roundToTwoDecimals(technicalDetails['ุดุจุงุจูู ุงููุงุฌูุฉ (ูยฒ)'] * pricesInput['ุดุจุงุจูู ูุฃุจูุงุจ (ุฏ.ุน/ูยฒ)']),
      'ุฃุจูุงุจ ุฎุงุฑุฌูุฉ': roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฎุงุฑุฌูุฉ'] * prices.externalDoorFixed),
      'ุฃุจูุงุจ ุฏุงุฎููุฉ': roundToTwoDecimals(technicalDetails['ุนุฏุฏ ุงูุฃุจูุงุจ ุงูุฏุงุฎููุฉ'] * prices.internalDoorFixed),
      'ุจูุงุจุฉ ุณูุงุฑุฉ': technicalDetails['ูุณุงุญุฉ ุงููุฑุงุฌ (ูยฒ)'] >= 24 ? roundToTwoDecimals(land['ุนุฑุถ ุงููุงุฌูุฉ (ู)'] * 2 * prices.carGatePerM2) : 0,
      'ููุงูุฑ': skylightCost,
      'ุฌุฏุฑุงู ุงูุชุบููู': roundToTwoDecimals(wallMortarArea * pricesInput['ุชุฑููุจ ุงูุฌุฏุฑุงู (ุฏ.ุน/ูยฒ)']),
      'ุตุจุบ ุงูุฌุฏุฑุงู': roundToTwoDecimals((totalPlasterArea + technicalDetails['ุณููู ุซุงูููุฉ (ูยฒ)']) * pricesInput['ุตุจุบ ุงูุฌุฏุฑุงู (ุฏ.ุน/ูยฒ)']),
      'ุนูุงูุฉ ุงูุฌุต': roundToTwoDecimals((externalWallsPlasterArea + internalWallsPlasterArea) * prices.plasterLaborPerM2 + 
        ceilingPlasterArea * prices.plasterCeilingLaborPerM2),
      'ุงูุชูููุฏ': roundToTwoDecimals((externalWallsPlasterArea + internalWallsPlasterArea) * prices.primingPerM2),
      'ุนูุงูุฉ ุงูุทุงุจูู': building['ููุน ุงูุทุงุจูู'] === 'thermostone'
        ? roundToTwoDecimals(Array.from({ length: building['ุนุฏุฏ ุงูุทูุงุจู'] }, (_, i) => {
            const bricksPerFloor = Math.ceil(brickCount / building['ุนุฏุฏ ุงูุทูุงุจู']);
            return Math.ceil(bricksPerFloor / 1000) * (prices.brickLaborPerThousand + i * prices.brickLaborExtraPerFloor);
          }).reduce((sum, cost) => sum + cost, 0))
        : roundToTwoDecimals(Array.from({ length: building['ุนุฏุฏ ุงูุทูุงุจู'] }, (_, i) => {
            const brickDblsPerFloor = Math.ceil(brickDbls / building['ุนุฏุฏ ุงูุทูุงุจู']);
            return brickDblsPerFloor * (prices.brickLaborPerDbl + i * prices.brickLaborExtraPerFloor);
          }).reduce((sum, cost) => sum + cost, 0)),
      'ุนูุงูุฉ ุงููุฌุงุฑุฉ ูุงูุชุณููุญ': roundToTwoDecimals(totalConcrete * (prices.carpentryLaborPerM3[building['ุชูุงุตูู ุงูุณูู'] || 'regular'] + prices.steelLaborPerM3)),
      'ููู ุงูููุงุฏ': building['ููุน ุงูุทุงุจูู'] === 'thermostone'
        ? roundToTwoDecimals(totalConcrete * prices.transportConcretePerM3 + 
           totalSteel * prices.transportSteelPerTon + 
           (cementForFloorMortar + cementForWallMortar) * prices.transportCementPerTon + 
           (sandForFloorMortar + sandForWallMortar) * prices.transportSandPerM3 + 
           brickDbls * prices.transportBricksThermostonePerThousand)
        : roundToTwoDecimals(totalConcrete * prices.transportConcretePerM3 + 
           totalSteel * prices.transportSteelPerTon + 
           (cementForFloorMortar + cementForWallMortar) * prices.transportCementPerTon + 
           (sandForFloorMortar + sandForWallMortar) * prices.transportSandPerM3 + 
           brickDbls * prices.transportBricksPerDbl),
      'ููุงุฏ ููุฑุจุงุฆูุฉ': roundToTwoDecimals(((technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] * 1 + technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)'] * 2) * 
        constants.electricalPointsPerMWall + roofAreaPerFloor * constants.electricalPointsPerM2Ceiling) * 
        prices.electricalPointCost + prices.electricalBoardFixed * (1 + (apartmentsInfo ? building['ุนุฏุฏ ุงูุดูู'] : 0))),
      'ุนูุงูุฉ ููุฑุจุงุฆูุฉ': roundToTwoDecimals(((technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] * 1 + technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)'] * 2) * 
        constants.electricalPointsPerMWall + roofAreaPerFloor * constants.electricalPointsPerM2Ceiling) * 
        prices.electricalLaborPerPoint),
      'ููุงุฏ ุงูุณุจุงูุฉ': roundToTwoDecimals(building['ุนุฏุฏ ุงูุญูุงูุงุช'] * prices.plumbingBathroomMaterials + 
        (apartmentsInfo ? building['ุนุฏุฏ ุงูุดูู'] : 1) * (prices.plumbingKitchenMaterials + prices.plumbingOtherMaterials)),
      'ุนูุงูุฉ ุงูุณุจุงูุฉ': roundToTwoDecimals(building['ุนุฏุฏ ุงูุญูุงูุงุช'] * prices.plumbingBathroomLabor),
      'ุชุฌููุฒุงุช ุงูุญูุงูุงุช': roundToTwoDecimals(building['ุนุฏุฏ ุงูุญูุงูุงุช'] * prices.bathroomFittingsPerSet),
      'ุชูููู': building['ุชูููู'] ? roundToTwoDecimals((technicalDetails['ุฌุฏุฑุงู ุฎุงุฑุฌูุฉ 24ุณู (ู)'] + technicalDetails['ุฌุฏุฑุงู ุฏุงุฎููุฉ 24ุณู (ู)']) * prices.hvacPerM) : 0,
      'ูุณุจุญ': building['ูุณุจุญ'] ? prices.poolFixed : 0,
      'ุณูุงุฌ': building['ุณูุงุฌ'] ? roundToTwoDecimals(technicalDetails['ุณุชุงุฑุฉ ุงูุณุทุญ (ู)'] * prices.fencePerM) : 0,
      'ูุตุนุฏ': building['ูุตุนุฏ'] ? roundToTwoDecimals(prices.elevatorBaseCost + prices.elevatorPerFloorCost * building['ุนุฏุฏ ุงูุทูุงุจู']) : 0,
      'ุณููู ุซุงูููุฉ': roundToTwoDecimals(technicalDetails['ุณููู ุซุงูููุฉ (ูยฒ)'] * prices.secondaryCeilingsPerM2),
      'ุฌุฏุฑุงู ุฏูููุฑูุฉ': roundToTwoDecimals(technicalDetails['ุฌุฏุฑุงู ุฏูููุฑูุฉ (ูยฒ)'] * prices.decorativeWallsPerM2),
      'ูุธูุฉ ุงููุฑุงุฌ': technicalDetails['ูุณุงุญุฉ ุงููุฑุงุฌ (ูยฒ)'] >= 24 ? prices.garageCanopyFixed : 0,
      'ูุญุฌุฑ ุงูุฏุฑุฌ': stairsRailingInfo ? roundToTwoDecimals(technicalDetails['ูุญุฌุฑ ุงูุฏุฑุฌ (ู)'] * pricesInput['ูุญุฌุฑ ุงูุฏุฑุฌ (ุฏ.ุน/ู)']) : 0,
      'ุงูุฌุฏุฑุงู ุงูุฏุงุฎููุฉ': internalWallsInfo ? roundToTwoDecimals(technicalDetails['ูุณุงุญุฉ ุงูุฌุฏุฑุงู (ูยฒ)'] * pricesInput['ุงูุฌุฏุฑุงู ุงูุฏุงุฎููุฉ (ุฏ.ุน/ูยฒ)']) : 0,
      'ุงูุทูุงุจู ุงูุณูููุฉ': basementInfo ? roundToTwoDecimals(building['ูุณุงุญุฉ ุงูุณููู ุงูุณูููุฉ (ูยฒ)'] * building['ุณุนุฑ ูยฒ ุงูุทูุงุจู ุงูุณูููุฉ']) : 0
    };

    // ุฅุฌูุงูู ุงูุชูููุฉ
    const totalCost = roundToTwoDecimals(Object.values(costBreakdown).reduce((sum, cost) => sum + cost, 0));

    // **ุชุญุถูุฑ ุงูุจูุงูุงุช ูุชูุฑูุฑ PDF**
    const pdfData = {
      // ุงูุตูุญุฉ ุงูุฃููู: ูุจุฐุฉ ุนู ุงูุดุฑูุฉ
      companyInfo: {
        name: 'ุดุฑูุฉ ุงูุฅูุดุงุกุงุช ุงูููุฏุณูุฉ ุงููุญุฏูุฏุฉ',
        description: 'ุดุฑูุฉ ุฑุงุฆุฏุฉ ูู ุชูุฏูู ุงูุญููู ุงูููุฏุณูุฉ ุงููุชูุงููุฉ ูุชุตููู ูุจูุงุก ุงููุดุงุฑูุน ุงูุณูููุฉ ูุงูุชุฌุงุฑูุฉ ููููุง ูุฃุนูู ูุนุงููุฑ ุงูุฌูุฏุฉ ูู ุงูุนุฑุงู.',
        contact: {
          phone: '1234-567-890',
          email: 'info@engineeringco.iq',
          address: 'ุจุบุฏุงุฏุ ุงูุนุฑุงู'
        },
        logo: 'path/to/logo.png' // ุณูุชู ุงุณุชุจุฏุงูู ูู HTML
      },

      // ุงูุตูุญุฉ ุงูุซุงููุฉ: ุงูุจูุงูุงุช ุงููุฏุฎูุฉ
      inputData: {
        customer: {
          title: 'ุจูุงูุงุช ุงูุนููู',
          fields: [
            { label: 'ุงูุงุณู', value: customer['ุงูุงุณู'] || 'ุบูุฑ ูุชููุฑ' },
            { label: 'ุฑูู ุงููุงุชู', value: customer['ุงููุงุชู'] || 'ุบูุฑ ูุชููุฑ' }
          ]
        },
        location: {
          title: 'ูุนูููุงุช ุงููููุน',
          fields: [
            { label: 'ุงููุญุงูุธุฉ', value: location['ุงููุญุงูุธุฉ'] || 'ุบูุฑ ูุญุฏุฏ' },
            { label: 'ุงูููุทูุฉ', value: location['ุงูููุทูุฉ'] || 'ุบูุฑ ูุญุฏุฏ' }
          ]
        },
        land: {
          title: 'ูุนูููุงุช ุงูุฃุฑุถ',
          fields: [
            { label: 'ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)', value: land['ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ)'] || 0 },
            { label: 'ุนุฑุถ ุงููุงุฌูุฉ (ู)', value: land['ุนุฑุถ ุงููุงุฌูุฉ (ู)'] || 0 }
          ]
        },
        building: {
          title: 'ุชูุงุตูู ุงููุจูู',
          fields: [
            { label: 'ุนุฏุฏ ุงูุทูุงุจู', value: building['ุนุฏุฏ ุงูุทูุงุจู'] || 0 },
            { label: 'ุนุฏุฏ ุงูุบุฑู', value: building['ุนุฏุฏ ุงูุบุฑู'] || 0 },
            { label: 'ุนุฏุฏ ุงูุญูุงูุงุช', value: building['ุนุฏุฏ ุงูุญูุงูุงุช'] || 0 },
            { label: 'ุงุฑุชูุงุน ุงูุทุงุจู ุงูุฃุฑุถู (ู)', value: building['ุงุฑุชูุงุน ุงูุฃุฑุถู (ู)'] || 0 },
            { label: 'ุงุฑุชูุงุน ุงูุทูุงุจู ุงูุฃุฎุฑู (ู)', value: building['ุงุฑุชูุงุน ุงูุทูุงุจู (ู)'] || 0 },
            { label: 'ุณูู ุงูุณูู (ู)', value: building['ุณูู ุงูุณูู (ู)'] || 0 },
            { label: 'ููุน ุงูุทุงุจูู', value: building['ููุน ุงูุทุงุจูู'] === 'yellow' ? 'ุทุงุจูู ุฃุตูุฑ' : building['ููุน ุงูุทุงุจูู'] === 'red' ? 'ุทุงุจูู ุฃุญูุฑ' : 'ุซุฑูุณุชูู' },
            { label: 'ููุน ุงููุงุฌูุฉ', value: building['ููุน ุงููุงุฌูุฉ'] === 'economy' ? 'ุงูุชุตุงุฏูุฉ' : building['ููุน ุงููุงุฌูุฉ'] === 'simple' ? 'ุจุณูุทุฉ' : 'ูุงุฎุฑุฉ' },
            { label: 'ูุฌูุฏ ุญุฏููุฉ', value: building['ุญุฏููุฉ'] ? 'ูุนู' : 'ูุง' },
            { label: 'ูุฌูุฏ ูุณุจุญ', value: building['ูุณุจุญ'] ? 'ูุนู' : 'ูุง' },
            { label: 'ูุฌูุฏ ุชูููู', value: building['ุชูููู'] ? 'ูุนู' : 'ูุง' },
            { label: 'ูุฌูุฏ ูุตุนุฏ', value: building['ูุตุนุฏ'] ? 'ูุนู' : 'ูุง' },
            { label: 'ูุฌูุฏ ุณูุงุฌ', value: building['ุณูุงุฌ'] ? 'ูุนู' : 'ูุง' }
          ]
        }
      },

      // ุงูุตูุญุฉ ุงูุซุงูุซุฉ: ุงููููุงุช
      quantities: {
        title: 'ุชูุงุตูู ุงููููุงุช ุงูููุฏุณูุฉ',
        sections: [
          {
            subtitle: 'ุงูุฎุฑุณุงูุฉ',
            items: [
              { name: 'ุฅุฌูุงูู ุงูุฎุฑุณุงูุฉ', value: totalConcrete, unit: 'ูยณ' },
              { name: 'ุฎุฑุณุงูุฉ ุงูุฃุณูู', value: roofConcrete, unit: 'ูยณ' },
              { name: 'ุฎุฑุณุงูุฉ ุงูุฑุจุงุทุงุช', value: tieBeamConcrete, unit: 'ูยณ' },
              { name: 'ุฎุฑุณุงูุฉ ุงูุฌุณูุฑ ุงูููููุจุฉ', value: invertedBeamConcrete, unit: 'ูยณ' },
              { name: 'ุฎุฑุณุงูุฉ ุฅุถุงููุฉ', value: additionalConcrete, unit: 'ูยณ' },
              { name: 'ุฎุฑุณุงูุฉ ุงูุฃุณุงุณ', value: raftVolume, unit: 'ูยณ' }
            ]
          },
          {
            subtitle: 'ุงูุทุงุจูู',
            items: [
              { name: 'ุนุฏุฏ ุงูุทุงุจููุงุช', value: brickCount, unit: 'ุทุงุจููุฉ' },
              { name: 'ุนุฏุฏ ุงูุฏุจูุงุช/ุงูุขูุงู', value: brickDbls, unit: building['ููุน ุงูุทุงุจูู'] === 'thermostone' ? 'ุฃูู' : 'ุฏุจู' },
              { name: 'ุญุฌู ุงูุฌุฏุฑุงู ุงูุตุงูู', value: wallsVolume, unit: 'ูยณ' }
            ]
          },
          {
            subtitle: 'ุงููููุฉ ูุงูุฃุฑุถูุงุช',
            items: [
              { name: 'ุฅุณููุช ูููุฉ ุงูุฃุฑุถูุงุช', value: cementForFloorMortar, unit: 'ุทู' },
              { name: 'ุฑูู ูููุฉ ุงูุฃุฑุถูุงุช', value: sandForFloorMortar, unit: 'ูยณ' },
              { name: 'ุฅุณููุช ูููุฉ ุงูุฌุฏุฑุงู', value: cementForWallMortar, unit: 'ุทู' },
              { name: 'ุฑูู ูููุฉ ุงูุฌุฏุฑุงู', value: sandForWallMortar, unit: 'ูยณ' },
              { name: 'ูุณุงุญุฉ ุงูุฃุฑุถูุงุช', value: flooringArea, unit: 'ูยฒ' }
            ]
          },
          {
            subtitle: 'ุงูุฌุต',
            items: [
              { name: 'ุฅุฌูุงูู ูุณุงุญุฉ ุงูุฌุต', value: totalPlasterArea, unit: 'ูยฒ' },
              { name: 'ูููุฉ ุงูุฌุจุณ', value: gypsumQuantity, unit: 'ุทู' },
              { name: 'ูููุฉ ุงูุฌูุฑ', value: limeQuantity, unit: 'ุทู' }
            ]
          },
          {
            subtitle: 'ุงูุฃุณุงุณ',
            items: [
              { name: 'ุญุฌู ุงูุญูุฑ', value: excavationVolume, unit: 'ูยณ' },
              { name: 'ุนุฏุฏ ุฑุญูุงุช ุงูููู', value: truckTrips, unit: 'ุฑุญูุฉ' },
              { name: 'ุญุตู ุงูุฃุณุงุณ', value: gravelBase, unit: 'ูยณ' },
              { name: 'ุฑูู ุงูุฃุณุงุณ', value: sandBase, unit: 'ูยณ' }
            ]
          },
          {
            subtitle: 'ุญุฏูุฏ ุงูุชุณููุญ',
            items: [
              { name: 'ุฅุฌูุงูู ุญุฏูุฏ ุงูุชุณููุญ', value: totalSteel, unit: 'ุทู' }
            ]
          }
        ]
      },

      // ุงูุตูุญุฉ ุงูุฑุงุจุนุฉ: ุงูุญุณุงุจุงุช ุงูุฅูุดุงุฆูุฉ
      engineering: {
        title: 'ุงูุญุณุงุจุงุช ุงูุฅูุดุงุฆูุฉ',
        sections: [
          {
            subtitle: 'ูุฒู ุงูููุดุฃ',
            items: [
              { name: 'ุฅุฌูุงูู ูุฒู ุงูููุดุฃ', value: totalWeight, unit: 'kN' },
              { name: 'ูุฒู ุงูุฎุฑุณุงูุฉ', value: roundToTwoDecimals(concreteWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุญุฏูุฏ ุงูุชุณููุญ', value: roundToTwoDecimals(steelWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุงูุทุงุจูู', value: roundToTwoDecimals(brickWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุงููููุฉ', value: roundToTwoDecimals((floorMortarWeight + wallMortarWeight) * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุงูุฃุฑุถูุงุช', value: roundToTwoDecimals(flooringWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุงูุฌุต', value: roundToTwoDecimals(plasterWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ุงูุญูู ุงูุญู', value: roundToTwoDecimals(liveLoadWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ุงูุญูู ุงูููุช ุงูุฅุถุงูู', value: roundToTwoDecimals(additionalDeadLoadWeight * constants.gravityConstant / 1000), unit: 'kN' },
              { name: 'ูุฒู ุงููุชุญุงุช', value: roundToTwoDecimals(totalOpeningsWeight * constants.gravityConstant / 1000), unit: 'kN' }
            ]
          },
          {
            subtitle: 'ุงูุฃุณุงุณ',
            items: [
              { name: 'ูุณุงุญุฉ ุงูุฃุณุงุณ', value: raftArea, unit: 'ูยฒ' },
              { name: 'ุณูู ุงูุฃุณุงุณ', value: raftThickness, unit: 'ู' },
              { name: 'ุถุบุท ุงูุฃุณุงุณ', value: pressure, unit: 'kN/mยฒ' },
              { name: 'ููุน ุงูุฃุณุงุณ', value: raftType, unit: '' },
              { name: 'ุชูุตูุงุช ุงูุฃุณุงุณ', value: foundationRecommendation, unit: '' }
            ]
          },
          {
            subtitle: 'ุงุณุชูุฑุงุฑ ุงูุฌุฏุฑุงู',
            items: [
              { name: 'ุณุนุฉ ุชุญูู ุงูุฌุฏุฑุงู', value: wallCapacity, unit: 'kN' },
              { name: 'ุงูุญุฏ ุงูุฃุฏูู ูุทูู ุงูุฌุฏุฑุงู', value: minWallLength, unit: 'ู' },
              { name: 'ุญุงูุฉ ุงูุงุณุชูุฑุงุฑ', value: stabilityNote, unit: '' }
            ]
          }
        ]
      },

      // ุงูุตูุญุฉ ุงูุฎุงูุณุฉ: ูุงุฆูุฉ ุงูุฃุณุนุงุฑ
      costs: {
        title: 'ุชูุงุตูู ุงูุชูุงููู',
        total: totalCost,
        items: Object.entries(costBreakdown).map(([name, value]) => ({
          name,
          value: roundToTwoDecimals(value),
          unit: 'ุฏ.ุน'
        }))
      },

      // ุงูุตูุญุฉ ุงูุณุงุฏุณุฉ: ูุงุฆูุฉ ุฃุณุนุงุฑ ุงูููุงุฏ
      materialPrices: {
        title: 'ุฃุณุนุงุฑ ุงูููุงุฏ ุงููุนุชูุฏุฉ (2025)',
        items: Object.entries(prices).map(([key, value]) => {
          let name, unit;
          switch (key) {
            case 'concreteC30PerM3': name = 'ุฎุฑุณุงูุฉ C30'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'concreteC40PerM3': name = 'ุฎุฑุณุงูุฉ C40'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'steelPerTon': name = 'ุญุฏูุฏ ุงูุชุณููุญ'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'cementOrdinaryPerTon': name = 'ุฅุณููุช ุนุงุฏู'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'sandPerM3': name = 'ุฑูู'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'gravelBasePerM3': name = 'ุญุตู ุงูุฃุณุงุณ'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'sandBasePerM3': name = 'ุฑูู ุงูุฃุณุงุณ'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'brickYellowPerDbl': name = 'ุทุงุจูู ุฃุตูุฑ (ุฏุจู)'; unit = 'ุฏ.ุน/ุฏุจู'; break;
            case 'brickRedPerDbl': name = 'ุทุงุจูู ุฃุญูุฑ (ุฏุจู)'; unit = 'ุฏ.ุน/ุฏุจู'; break;
            case 'brickThermostonePerThousand': name = 'ุทุงุจูู ุซุฑูุณุชูู (ุฃูู)'; unit = 'ุฏ.ุน/ุฃูู'; break;
            case 'gypsumPerTon': name = 'ุฌุจุณ'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'limePerTon': name = 'ุฌูุฑ'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'plasterLaborPerM2': name = 'ุนูุงูุฉ ุงูุฌุต'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'plasterCeilingLaborPerM2': name = 'ุนูุงูุฉ ุฌุต ุงูุฃุณูู'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'primingPerM2': name = 'ุงูุชูููุฏ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'flooringMortarLaborPerM2': name = 'ุนูุงูุฉ ูููุฉ ุงูุฃุฑุถูุงุช'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'facadeEconomyPerM2': name = 'ูุงุฌูุฉ ุงูุชุตุงุฏูุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'facadeSimplePerM2': name = 'ูุงุฌูุฉ ุจุณูุทุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'facadeLuxuryPerM2': name = 'ูุงุฌูุฉ ูุงุฎุฑุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'facadeLaborPerM2': name = 'ุนูุงูุฉ ุงููุงุฌูุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'externalDoorFixed': name = 'ุจุงุจ ุฎุงุฑุฌู'; unit = 'ุฏ.ุน'; break;
            case 'internalDoorFixed': name = 'ุจุงุจ ุฏุงุฎูู'; unit = 'ุฏ.ุน'; break;
            case 'carGatePerM2': name = 'ุจูุงุจุฉ ุณูุงุฑุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'hvacPerM': name = 'ุชูููู'; unit = 'ุฏ.ุน/ู'; break;
            case 'poolFixed': name = 'ูุณุจุญ'; unit = 'ุฏ.ุน'; break;
            case 'gardenPerM2': name = 'ุญุฏููุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'fencePerM': name = 'ุณูุงุฌ'; unit = 'ุฏ.ุน/ู'; break;
            case 'elevatorBaseCost': name = 'ูุตุนุฏ ุฃุณุงุณู'; unit = 'ุฏ.ุน'; break;
            case 'elevatorPerFloorCost': name = 'ูุตุนุฏ ููู ุทุงุจู'; unit = 'ุฏ.ุน'; break;
            case 'excavationPerM3': name = 'ุญูุฑ'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'truckTransportPerTrip': name = 'ููู ุงููุฎููุงุช'; unit = 'ุฏ.ุน/ุฑุญูุฉ'; break;
            case 'baseLaborPerM2': name = 'ุนูุงูุฉ ุงูุฃุณุงุณ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'electricalPointCost': name = 'ููุทุฉ ููุฑุจุงุฆูุฉ'; unit = 'ุฏ.ุน'; break;
            case 'electricalBoardFixed': name = 'ููุญุฉ ููุฑุจุงุฆูุฉ'; unit = 'ุฏ.ุน'; break;
            case 'electricalLaborPerPoint': name = 'ุนูุงูุฉ ููุทุฉ ููุฑุจุงุฆูุฉ'; unit = 'ุฏ.ุน'; break;
            case 'plumbingBathroomMaterials': name = 'ููุงุฏ ุณุจุงูุฉ ุงูุญูุงู'; unit = 'ุฏ.ุน'; break;
            case 'plumbingKitchenMaterials': name = 'ููุงุฏ ุณุจุงูุฉ ุงููุทุจุฎ'; unit = 'ุฏ.ุน'; break;
            case 'plumbingOtherMaterials': name = 'ููุงุฏ ุณุจุงูุฉ ุฃุฎุฑู'; unit = 'ุฏ.ุน'; break;
            case 'plumbingBathroomLabor': name = 'ุนูุงูุฉ ุณุจุงูุฉ ุงูุญูุงู'; unit = 'ุฏ.ุน'; break;
            case 'bathroomFittingsPerSet': name = 'ุชุฌููุฒุงุช ุงูุญูุงู'; unit = 'ุฏ.ุน/ูุฌููุนุฉ'; break;
            case 'brickLaborPerDbl': name = 'ุนูุงูุฉ ุงูุทุงุจูู (ุฏุจู)'; unit = 'ุฏ.ุน/ุฏุจู'; break;
            case 'brickLaborPerThousand': name = 'ุนูุงูุฉ ุทุงุจูู ุซุฑูุณุชูู'; unit = 'ุฏ.ุน/ุฃูู'; break;
            case 'brickLaborExtraPerFloor': name = 'ุฒูุงุฏุฉ ุนูุงูุฉ ุงูุทุงุจูู ููู ุทุงุจู'; unit = 'ุฏ.ุน'; break;
            case 'carpentryLaborPerM3': 
              name = 'ุนูุงูุฉ ุงููุฌุงุฑุฉ'; 
              value = {
                plywood: prices.carpentryLaborPerM3.plywood,
                regular: prices.carpentryLaborPerM3.regular,
                waffle: prices.carpentryLaborPerM3.waffle
              }; 
              unit = 'ุฏ.ุน/ูยณ'; 
              break;
            case 'steelLaborPerM3': name = 'ุนูุงูุฉ ุญุฏูุฏ ุงูุชุณููุญ'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'skylightsPerM2': name = 'ููุงูุฑ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'secondaryCeilingsPerM2': name = 'ุณููู ุซุงูููุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'decorativeWallsPerM2': name = 'ุฌุฏุฑุงู ุฏูููุฑูุฉ'; unit = 'ุฏ.ุน/ูยฒ'; break;
            case 'garageCanopyFixed': name = 'ูุธูุฉ ุงููุฑุงุฌ'; unit = 'ุฏ.ุน'; break;
            case 'transportConcretePerM3': name = 'ููู ุงูุฎุฑุณุงูุฉ'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'transportSteelPerTon': name = 'ููู ุญุฏูุฏ ุงูุชุณููุญ'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'transportCementPerTon': name = 'ููู ุงูุฅุณููุช'; unit = 'ุฏ.ุน/ุทู'; break;
            case 'transportSandPerM3': name = 'ููู ุงูุฑูู'; unit = 'ุฏ.ุน/ูยณ'; break;
            case 'transportBricksPerDbl': name = 'ููู ุงูุทุงุจูู (ุฏุจู)'; unit = 'ุฏ.ุน/ุฏุจู'; break;
            case 'transportBricksThermostonePerThousand': name = 'ููู ุทุงุจูู ุซุฑูุณุชูู'; unit = 'ุฏ.ุน/ุฃูู'; break;
            default: name = key; unit = 'ุฏ.ุน'; break;
          }
          return { name, value: roundToTwoDecimals(value), unit };
        }).filter(item => item.value > 0) // ุฅุฒุงูุฉ ุงูุฃุณุนุงุฑ ุบูุฑ ุงููุณุชุฎุฏูุฉ
      }
    };

    // **ุฅุฑุฌุงุน ุงููุชุงุฆุฌ**
    return {
      success: true,
      message: 'ุชูุช ูุนุงูุฌุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ',
      pdfData
    };
  } catch (error) {
    console.error('โ **ุฎุทุฃ ูู processAdvanced**:', error);
    return {
      success: false,
      message: error.message || 'ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุจูุงูุงุช',
      pdfData: null
    };
  }
}

// ุชุตุฏูุฑ ุงูุฏุงูุฉ
module.exports = { processAdvanced };
